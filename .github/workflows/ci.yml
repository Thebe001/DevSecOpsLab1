name: CI Pipeline de Base

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        python -m unittest test_app.py

        - name: Run SAST with Bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit_report.json || true  # || true pour continuer même si échec
        # Vérifier si vulnérabilités critiques
        if jq '.results[] | select(.issue_severity == "HIGH" or .issue_severity == "CRITICAL")' bandit_report.json | grep -q .; then
          echo "Vulnérabilités critiques détectées ! Pipeline échoue."
          exit 1
        fi
    
    - name: Run SCA with Snyk
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        curl -sL https://raw.githubusercontent.com/snyk/snyk/master/scripts/install-snyk.sh | bash
        snyk test --severity-threshold=high --fail-on=upgradable || true
        # Si snyk test échoue avec high/critical, le pipeline échoue déjà grâce à --severity-threshold

    - name: Deploy ephemeral environment
      run: |
        docker build -t mon-app .
        docker run -d -p 8000:8000 --name app mon-app  # Assume app.py écoute sur port 8000 ; adapte si besoin

    - name: Run DAST with OWASP ZAP
      run: |
        docker pull owasp/zap2docker-stable
        docker run --network host owasp/zap2docker-stable zap-baseline.py -t http://localhost:8000 -r zap_report.html -l FAIL  # -l FAIL échoue si alertes
        # Stop app
        docker stop app