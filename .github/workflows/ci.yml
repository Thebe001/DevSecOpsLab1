name: CI Pipeline de Base

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1Ô∏è‚É£ Checkout du code
    - uses: actions/checkout@v2

    # 2Ô∏è‚É£ Installer Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    # 3Ô∏è‚É£ Installer les d√©pendances
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # 4Ô∏è‚É£ Lancer les tests unitaires
    - name: Run unit tests
      run: python -m unittest discover -s . -p "test_*.py"

    # 5Ô∏è‚É£ Scanner le code avec Bandit (SAST)
    - name: Run SAST with Bandit
      run: |
        pip install bandit jq
        bandit -r . -f json -o bandit_report.json || true
        if jq '.results[] | select(.issue_severity=="HIGH" or .issue_severity=="CRITICAL")' bandit_report.json | grep -q .; then
          echo "Vuln√©rabilit√©s critiques d√©tect√©es par Bandit ! Pipeline √©choue."
          exit 1
        fi

    # 6Ô∏è‚É£ Scanner les d√©pendances avec Snyk (SCA)
    - name: Setup Snyk
      uses: snyk/actions/setup@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        snyk-version: 'latest'

    - name: Run SCA with Snyk
      run: snyk test --severity-threshold=high --fail-on=upgradable
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

    # 7Ô∏è‚É£ D√©ployer l'application Python en Docker
    - name: Deploy ephemeral environment
      run: |
        docker build -t mon-app .
        docker run -d -p 8000:8000 --name app mon-app
        # Attendre que le serveur soit pr√™t
        timeout 60 bash -c "until curl -s http://localhost:8000; do sleep 1; done" || echo "Server failed to start"
        docker logs app

    # 8Ô∏è‚É£ Cr√©er dossier pour les rapports ZAP
    - name: Create ZAP reports folder
      run: mkdir -p zap-reports && chmod -R 777 zap-reports

    # 9Ô∏è‚É£ Scanner l'application avec OWASP ZAP (DAST)
    - name: Run DAST with OWASP ZAP
      run: |
        docker pull ghcr.io/zaproxy/zaproxy:stable
        docker run --rm --network host \
          -u 0 \
          -v $PWD/zap-reports:/zap/wrk \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py \
          -t http://localhost:8000 \
          -r /zap/wrk/zap_report.html \
          -J /zap/wrk/zap_report.json \
          -l FAIL
        docker stop app

    # üîü √âchouer la pipeline si ZAP trouve des vuln√©rabilit√©s HIGH/CRITICAL
    - name: Fail if ZAP finds HIGH/CRITICAL
      run: |
        if jq '.site[].alerts[] | select(.risk=="High" or .risk=="Critical")' zap-reports/zap_report.json | grep -q .; then
          echo "Vuln√©rabilit√©s HIGH/CRITICAL d√©tect√©es par ZAP ! Pipeline √©choue."
          exit 1
        fi